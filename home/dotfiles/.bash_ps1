### Change PS1 by function, in order to change properly when a bad command is

PROMPT_COMMAND=ps1

GREEN='\[\033[0;32m\]'
RED='\[\033[0;31m\]'
BLUE='\[\033[1;34m\]'
YELLOW='\[\033[1;33m\]'
COLOR_NONE='\[\e[0m\]'

function set_virtualenv () {
  if test -z "$VIRTUAL_ENV" ; then
    PYTHON_VIRTUALENV=""
  else
    PYTHON_VIRTUALENV="${GREEN}(pyenv:`basename \"$VIRTUAL_ENV\"`)${COLOR_NONE}"
  fi
}

function is_git_repo {
  git branch > /dev/null 2>&1
}

function set_git_branch {
  git_status="$(git status 2> /dev/null)"

  if [[ ${git_status} =~ "working tree clean" ]]; then
    state="${GREEN}"
  elif [[ ${git_status} =~ "Changes to be committed" ]]; then
    state="${YELLOW}"
  else
    state="${RED}"
  fi

  remote_pattern="Your branch is (.*) of"
  if [[ ${git_status} =~ ${remote_pattern} ]]; then
    if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
      remote="^"
    else
      remote="v"
    fi
  else
    remote=""
  fi

  diverge_pattern="Your branch and (.*) have diverged"
  if [[ ${git_status} =~ ${diverge_pattern} ]]; then
    remote=":"
  fi

  branch_pattern="On branch ([^${IFS}]*)"
  if [[ "${git_status}" =~ ${branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
  fi

  BRANCH="${state}(git:${branch})${remote}${COLOR_NONE} "
}

function ps1 {
  ### PS1
  if [ $? -eq "0" ]
    then 
      SC="${GREEN}+"
    else
      SC="${RED}-"
  fi

  if is_git_repo ; then
    set_git_branch
  else
    BRANCH=''
  fi

  set_virtualenv

  PS1="{\[$(tput sgr0)\]\[\033[38;5;10m\]\h\[$(tput sgr0)\]\[\033[38;5;15m\]@\[$(tput sgr0)\]\[\033[38;5;226m\]\u\[$(tput sgr0)\]\[\033[38;5;15m\]}:\w [${SC}\[\e[0m\]]\n${PYTHON_VIRTUALENV}${BRANCH}\n >>> \[$(tput sgr0)\]"
}
### END PS1 stuff
